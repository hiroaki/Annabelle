# For development environment - compose.yml
#
# Usage:
#
# 1. Build and start the container
#
#   # This will start the Rails console inside the container,
#   # which is just to keep the container running.
#   # The Rails server will NOT start automatically,
#   # so please operate inside the container as described below.
#   $ docker compose up --build
#
# 2. In another terminal, enter the container
#
#   $ docker compose exec web bash
#
# 3. Run rails commands inside the container
#
#   # Start the server
#   > bin/rails s -b 0.0.0.0 -p 3000
#
#   # Run migrations or other Rails commands
#   > bin/rails db:migrate
#
# 4. Access from your browser on the host
#
#   # Application
#   http://127.0.0.1:3000/
#
#   # MailCatcher Web UI
#   http://127.0.0.1:1080/
#
# development 環境用 compose.yml
#
# 使い方:
#
# 1. ビルド、コンテナ起動
#
#   # これによりコンテナ内で Rails コンソールが起動しますが、
#   # これはコンテナを維持するためだけのものです。
#   # Rails サーバーは起動しませんので、以下に述べるようにコンテナ内で操作してください。
#   $ docker compose up --build
#
# 2. 別ターミナルでコンテナ内にはいる
#
#   $ docker compose exec web bash
#
# 3. コンテナ内で rails コマンドを実行
#
#   # サーバーを起動
#   > bin/rails s -b 0.0.0.0 -p 3000
#
#   # マイグレーションなど他の Rails コマンド
#   > bin/rails db:migrate
#
# 4. ホスト上のブラウザでアクセス
#
#   # アプリケーション
#   http://127.0.0.1:3000/
#
#   # MailCatcher の Web UI
#   http://127.0.0.1:1080/
#
services:
  web:
    build:
      context: .
      args:
        RAILS_ENV: development
    environment:
      DOCKER: 1
      RAILS_ENV: development
      ANNABELLE_VARIANT_PROCESSOR: vips
      SMTP_ADDRESS: smtp
      SMTP_PORT: 1025
      SMTP_DOMAIN:
      SMTP_USERNAME:
      SMTP_PASSWORD:
      APP_HTTP_HOST: 127.0.0.1
      APP_HTTP_PORT: 3000
      APP_HTTP_PROTOCOL: http
    command: bundle exec rails console
    ports:
      - "3000:3000"
    volumes:
      - .:/rails
      - bundle:/usr/local/bundle
    tty: true
    stdin_open: true
    depends_on:
      - smtp

  smtp:
    image: sj26/mailcatcher:v0.10.0
    ports:
      - "1080:1080"
      - "1025:1025"

volumes:
  bundle:
